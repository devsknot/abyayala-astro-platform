---
import NewsLayout from '../../layouts/NewsLayout.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import ShareButtons from '../../components/ShareButtons.astro';
import RelatedNews from '../../components/RelatedNews.astro';
import CategoryTag from '../../components/CategoryTag.astro';
import { SITE_URL } from '../../consts';
import { getAllArticles, getArticleBySlug } from '../../utils/contentApi.js';

// Configuración para SSR
export const prerender = false;

// Definir interfaces para los tipos de datos
interface Article {
  slug: string;
  title: string;
  description: string;
  pubDate: string;
  featured_image?: string;
  category: string;
  author?: string;
  content: string;
}

// Obtener el slug del artículo de los parámetros de la URL
const { slug } = Astro.params;

// Verificar que el slug existe
if (!slug) {
  return Astro.redirect('/');
}

// Crear un artículo de ejemplo como fallback
const fallbackArticle: Article = {
  slug: slug || 'articulo-ejemplo',
  title: `Artículo de ejemplo: ${slug}`,
  description: 'Este artículo es un ejemplo generado automáticamente para evitar errores 500.',
  content: '<p>Este es un contenido de ejemplo que se muestra cuando no se puede cargar el artículo original. El sistema ha generado esta respuesta para evitar errores 500.</p><p>Estamos trabajando para solucionar los problemas técnicos. Por favor, intenta nuevamente más tarde.</p>',
  pubDate: new Date().toISOString(),
  category: 'general',
  featured_image: '/blog-placeholder-1.jpg',
  author: 'Colectivo Abya Yala'
};

// Intentar obtener el artículo con manejo de errores
let article: Article | null = null;
try {
  console.log(`Intentando obtener artículo para slug: ${slug}`);
  article = await getArticleBySlug(slug, Astro.url.origin) as Article | null;
  console.log('Respuesta de API:', article ? 'Artículo encontrado' : 'Artículo no encontrado');
} catch (error) {
  console.error('Error al obtener artículo:', error);
}

// Usar el artículo de fallback si no se encuentra o hay error
if (!article) {
  console.log('Usando artículo de fallback para evitar error 500');
  article = fallbackArticle;
}

// Obtener todos los artículos para mostrar artículos relacionados
const allArticles = await getAllArticles(Astro.url.origin) as Article[];

// Filtrar artículos relacionados (misma categoría, excluyendo el actual)
const relatedArticles = allArticles
  .filter(a => a.category === article.category && a.slug !== article.slug)
  .slice(0, 3);

// URL completa del artículo para compartir
const articleUrl = `${SITE_URL}/news/${article.slug}`;

// Formatear la fecha de publicación
const pubDate = new Date(article.pubDate);

// Construir la URL completa para compartir
const currentUrl = `${SITE_URL}/news/${article.slug}/`;

// Usar el contenido del artículo
const contentHtml = article.content;

---

<NewsLayout
  title={article.title}
  description={article.description}
  pubDate={pubDate}
  heroImage={article.featured_image || "/blog-placeholder-1.jpg"}
  category={article.category}
  author={article.author || "Colectivo Abya Yala"}
>
  <div class="news-header">
    <CategoryTag category={article.category} absolute={false} />
    <h1>{article.title}</h1>
    <div class="news-meta">
      <div class="author-date">
        <span class="author">Por {article.author || "Colectivo Abya Yala"}</span>
        <span class="date-separator">•</span>
        <FormattedDate date={pubDate} />
      </div>
      <ShareButtons 
        title={article.title} 
        url={currentUrl} 
        description={article.description} 
      />
    </div>
  </div>

  <div class="news-content">
    <div set:html={contentHtml} />
  </div>
  
  <ShareButtons 
    title={article.title} 
    url={currentUrl} 
    description={article.description} 
    class="share-bottom"
  />
  
  <RelatedNews 
    currentSlug={article.slug}
    category={article.category}
    allNews={relatedArticles}
    count={3}
  />
</NewsLayout>

<style>
  .news-header {
    margin-bottom: 2rem;
  }
  
  .news-header h1 {
    font-size: 2.5rem;
    line-height: 1.2;
    margin: 0.5rem 0 1rem;
  }
  
  .news-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid var(--color-border, #eaeaea);
  }
  
  .author-date {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.95rem;
    color: var(--color-text-muted);
  }
  
  .date-separator {
    color: var(--color-text-muted);
  }
  
  .author {
    font-weight: 500;
  }
  
  .news-content {
    margin: 2rem 0;
    font-size: 1.1rem;
    line-height: 1.7;
  }
  
  .news-content :global(h1),
  .news-content :global(h2),
  .news-content :global(h3),
  .news-content :global(h4) {
    margin-top: 1.5em;
    margin-bottom: 0.5em;
  }
  
  .news-content :global(h1) {
    font-size: 2rem;
  }
  
  .news-content :global(h2) {
    font-size: 1.75rem;
  }
  
  .news-content :global(h3) {
    font-size: 1.5rem;
  }
  
  .news-content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 1.5rem 0;
  }
  
  .news-content :global(p) {
    margin-bottom: 1.5rem;
  }
  
  .news-content :global(blockquote) {
    border-left: 4px solid var(--color-primary);
    padding-left: 1rem;
    font-style: italic;
    margin: 1.5rem 0;
  }
  
  .news-content :global(ul),
  .news-content :global(ol) {
    margin: 1rem 0 1.5rem 1.5rem;
  }
  
  .news-content :global(li) {
    margin-bottom: 0.5rem;
  }
  
  .share-bottom {
    margin: 3rem 0;
    display: flex;
    justify-content: center;
  }
  
  @media (max-width: 768px) {
    .news-header h1 {
      font-size: 2rem;
    }
    
    .news-meta {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .news-content {
      font-size: 1rem;
    }
  }
</style>
