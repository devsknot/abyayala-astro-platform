---
// Importaciones necesarias (deben estar a nivel superior)
import NewsLayout from '../../layouts/NewsLayout.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import ShareButtons from '../../components/ShareButtons.astro';
import RelatedNews from '../../components/RelatedNews.astro';
import CategoryTag from '../../components/CategoryTag.astro';
import { SITE_URL } from '../../consts';
import { getAllArticles, getArticleBySlug } from '../../utils/contentApi.js';

// Configuración para SSR
export const prerender = false;

// Logs para depuración
console.log('DEPURACIÓN: Iniciando renderizado de página de artículo');

// Definir interfaces para los tipos de datos
interface Article {
  slug: string;
  title: string;
  description: string;
  pubDate: string;
  featured_image?: string;
  category: string;
  author?: string;
  content: string;
}

// Obtener el slug del artículo de los parámetros de la URL
const { slug } = Astro.params;
console.log('DEPURACIÓN Slug:', slug);

// Verificar que el slug existe
if (!slug) {
  console.log('DEPURACIÓN: No se encontró slug, redirigiendo a la página principal');
  return Astro.redirect('/');
}

// Crear un artículo de ejemplo como fallback
const fallbackArticle: Article = {
  slug: slug || 'articulo-ejemplo',
  title: `Artículo de ejemplo: ${slug}`,
  description: 'Este artículo es un ejemplo generado automáticamente.',
  content: '<p>Este es un contenido de ejemplo. El sistema ha generado esta respuesta para evitar errores.</p>',
  pubDate: new Date().toISOString(),
  category: 'general',
  featured_image: '/blog-placeholder-1.jpg',
  author: 'Autor Desconocido'
};

// Definir interfaz para respuestas de API
interface ApiResponse {
  [key: string]: any;
}

interface ArticlesResponse {
  articles?: Article[];
  [key: string]: any;
}

// Intentar obtener el artículo
console.log('DEPURACIÓN: Intentando obtener artículo');
let article: Article = fallbackArticle;
let error = null;

try {
  // Intentar obtener el artículo real (con manejo de errores)
  console.log(`Intentando obtener artículo para slug: ${slug}`);
  const response: ApiResponse = await getArticleBySlug(slug, Astro.url.origin) as ApiResponse;
  console.log('Respuesta de API recibida:', response ? 'OK' : 'No hay respuesta');
  
  if (response && typeof response === 'object' && 'title' in response) {
    article = response as Article;
    console.log('Artículo encontrado:', article.title);
  } else {
    console.log('No se encontró el artículo, usando fallback');
    article = fallbackArticle;
  }
} catch (err) {
  console.error('Error al obtener artículo:', err);
  error = err;
  article = fallbackArticle;
  console.log('Usando artículo de fallback debido a error');
}

// Intentar cargar artículos relacionados con manejo de errores
let relatedArticles: Article[] = [];
try {
  console.log('Intentando obtener artículos relacionados...');
  const allArticlesResponse: ArticlesResponse = await getAllArticles(Astro.url.origin) as ArticlesResponse;
  
  if (allArticlesResponse && typeof allArticlesResponse === 'object' && 'articles' in allArticlesResponse && Array.isArray(allArticlesResponse.articles)) {
    console.log(`Se encontraron ${allArticlesResponse.articles.length} artículos en total`);
    // Solo obtener hasta 3 artículos relacionados de la misma categoría
    relatedArticles = allArticlesResponse.articles
      .filter((a: Article) => a.category === article.category && a.slug !== article.slug)
      .slice(0, 3);
    console.log(`Se encontraron ${relatedArticles.length} artículos relacionados`);
  } else {
    console.log('Formato de respuesta inesperado para artículos relacionados');
  }
} catch (relatedError) {
  console.error('Error al obtener artículos relacionados:', relatedError);
}

// Formatear la fecha de publicación
let pubDate: Date;
try {
  pubDate = new Date(article.pubDate);
} catch (dateError) {
  console.error('Error al formatear fecha:', dateError);
  pubDate = new Date();
}

// URL completa para compartir
const currentUrl = `${SITE_URL}/news/${slug}/`;

// Usar el contenido del artículo
const contentHtml = article.content || '<p>No hay contenido disponible</p>';

console.log('DEPURACIÓN: Renderizado completado');


---

{/* SECCIÓN DE RENDERIZADO CON MANEJO DE ERRORES Y LOGS */}
<NewsLayout
  title={article?.title || 'Artículo no disponible'}
  description={article?.description || 'Sin descripción'}
  pubDate={pubDate}
  heroImage={article?.featured_image || "/blog-placeholder-1.jpg"}
  category={article?.category || 'general'}
  author={article?.author || "Autor Desconocido"}
>
  {/* Barra de depuración (visible solo en desarrollo) */}
  <div class="debug-bar">
    <details>
      <summary>Información de depuración</summary>
      <ul>
        <li><strong>Slug:</strong> {Astro.params.slug}</li>
        <li><strong>URL:</strong> {Astro.url.href}</li>
        <li><strong>Hora:</strong> {new Date().toLocaleString()}</li>
        <li><strong>Categoría:</strong> {article?.category}</li>
        <li><strong>Artículos relacionados:</strong> {relatedArticles?.length || 0}</li>
      </ul>
    </details>
  </div>

  <div class="news-header">
    <CategoryTag category={article?.category || 'general'} absolute={false} />
    <h1>{article?.title || 'Artículo no disponible'}</h1>
    <div class="news-meta">
      <div class="author-date">
        <span class="author">Por {article?.author || "Autor Desconocido"}</span>
        <span class="date-separator">•</span>
        <FormattedDate date={pubDate} />
      </div>
      <ShareButtons 
        title={article?.title || 'Artículo'} 
        url={currentUrl} 
        description={article?.description || 'Sin descripción'} 
      />
    </div>
  </div>

  <div class="news-content">
    <div set:html={contentHtml} />
  </div>
  
  <ShareButtons 
    title={article?.title || 'Artículo'} 
    url={currentUrl} 
    description={article?.description || 'Sin descripción'} 
    class="share-bottom"
  />
  
  {relatedArticles && relatedArticles.length > 0 ? (
    <RelatedNews 
      currentSlug={article?.slug || ''}
      category={article?.category || 'general'}
      allNews={relatedArticles}
      count={3}
    />
  ) : (
    <div class="no-related">
      <p>No hay artículos relacionados disponibles</p>
    </div>
  )}
</NewsLayout>

<style>
  .debug-bar {
    background: #fffde7;
    padding: 10px;
    margin-bottom: 20px;
    border-radius: 4px;
    border: 1px solid #ffe0b2;
  }
  
  .debug-bar details summary {
    cursor: pointer;
    font-weight: bold;
    color: #e65100;
  }
  
  .debug-bar ul {
    margin-top: 10px;
    padding-left: 20px;
  }
  
  .debug-bar li {
    margin-bottom: 5px;
  }
  
  .no-related {
    margin-top: 30px;
    padding: 15px;
    background: #f5f5f5;
    border-radius: 4px;
    text-align: center;
    color: #757575;
  }


<style>
  .news-header {
    margin-bottom: 2rem;
  }
  
  .news-header h1 {
    font-size: 2.5rem;
    line-height: 1.2;
    margin: 0.5rem 0 1rem;
  }
  
  .news-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid var(--color-border, #eaeaea);
  }
  
  .author-date {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.95rem;
    color: var(--color-text-muted);
  }
  
  .date-separator {
    color: var(--color-text-muted);
  }
  
  .author {
    font-weight: 500;
  }
  
  .news-content {
    margin: 2rem 0;
    font-size: 1.1rem;
    line-height: 1.7;
  }
  
  .news-content :global(h1),
  .news-content :global(h2),
  .news-content :global(h3),
  .news-content :global(h4) {
    margin-top: 1.5em;
    margin-bottom: 0.5em;
  }
  
  .news-content :global(h1) {
    font-size: 2rem;
  }
  
  .news-content :global(h2) {
    font-size: 1.75rem;
  }
  
  .news-content :global(h3) {
    font-size: 1.5rem;
  }
  
  .news-content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 1.5rem 0;
  }
  
  .news-content :global(p) {
    margin-bottom: 1.5rem;
  }
  
  .news-content :global(blockquote) {
    border-left: 4px solid var(--color-primary);
    padding-left: 1rem;
    font-style: italic;
    margin: 1.5rem 0;
  }
  
  .news-content :global(ul),
  .news-content :global(ol) {
    margin: 1rem 0 1.5rem 1.5rem;
  }
  
  .news-content :global(li) {
    margin-bottom: 0.5rem;
  }
  
  .share-bottom {
    margin: 3rem 0;
    display: flex;
    justify-content: center;
  }
  
  @media (max-width: 768px) {
    .news-header h1 {
      font-size: 2rem;
    }
    
    .news-meta {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .news-content {
      font-size: 1rem;
    }
  }
</style>
