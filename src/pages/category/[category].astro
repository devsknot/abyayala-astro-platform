---
import BaseLayout from '../../layouts/BaseLayout.astro';
import NewsCard from '../../components/NewsCard.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { getArticlesByCategory, getAllCategories } from '../../utils/contentApi.js';

// Configuración para SSR
export const prerender = false;

console.log(`[CATEGORY-PAGE] Iniciando renderizado de página de categoría`);

// Obtener el parámetro de categoría de la URL
const { category: categorySlug } = Astro.params;
console.log(`[CATEGORY-PAGE] Parámetro de categoría recibido: "${categorySlug}"`);

// Obtener información de la categoría
console.log(`[CATEGORY-PAGE] Obteniendo todas las categorías...`);
const categories = await getAllCategories(Astro.url.origin);
console.log(`[CATEGORY-PAGE] Categorías obtenidas: ${categories.length}`);

// Verificar que categories sea un array y tenga elementos
const categoriesArray = Array.isArray(categories) ? categories : [];

// Buscar la categoría específica (primero por slug, luego por id para compatibilidad)
console.log(`[CATEGORY-PAGE] Buscando categoría con slug: "${categorySlug}"`);
const category = categoriesArray.find(cat => 
  // Buscar primero por slug (nuevo formato)
  cat.slug === categorySlug ||
  // O por id (formato antiguo para compatibilidad)
  cat.id === categorySlug
);

if (category) {
  console.log(`[CATEGORY-PAGE] Categoría encontrada: ${JSON.stringify({
    slug: category.slug,
    id: category.id || 'N/A',
    name: category.name
  })}`);
} else {
  console.log(`[CATEGORY-PAGE] Categoría no encontrada, redirigiendo a la página principal`);
}

// Si la categoría no existe, redirigir a la página principal
if (!category) {
  return Astro.redirect('/');
}

// Obtener artículos de la API filtrados por categoría
// Usar slug como identificador principal, con fallback a id para compatibilidad
const categoryIdentifier = category.slug || category.id;
console.log(`[CATEGORY-PAGE] Obteniendo artículos para la categoría: "${categoryIdentifier}"`);
const articlesResult = await getArticlesByCategory(categoryIdentifier, Astro.url.origin);

// Asegurar que newsItems sea siempre un array
const newsItems = Array.isArray(articlesResult) ? articlesResult : [];
console.log(`[CATEGORY-PAGE] Artículos obtenidos: ${newsItems.length}`);

if (newsItems.length > 0) {
  console.log(`[CATEGORY-PAGE] Primer artículo: ${JSON.stringify({
    title: newsItems[0].title,
    category: newsItems[0].category || 'no-category',
    fecha: newsItems[0].pubDate || newsItems[0].pub_date || newsItems[0].date || 'sin fecha'
  })}`);
}

// Ordenar por fecha de publicación (más reciente primero)
console.log(`[CATEGORY-PAGE] Ordenando artículos por fecha...`);
if (newsItems.length > 0) {
  newsItems.sort((a, b) => {
    // Manejar diferentes formatos de fecha y valores nulos
    const dateA = new Date(a.pubDate || a.pub_date || a.date || 0).valueOf();
    const dateB = new Date(b.pubDate || b.pub_date || b.date || 0).valueOf();
    return dateB - dateA;
  });
}

// Mensaje para mostrar si no hay artículos
const noArticlesMessage = `No hay artículos disponibles en la categoría ${category.name}. Por favor, vuelva a intentarlo más tarde.`;
---

<BaseLayout title={`${category.name} - Abya Yala`} description={category.description}>
  <div class="category-header">
    <div class="container">
      <h1>{category.name}</h1>
      <p>{category.description}</p>
    </div>
  </div>
  
  <section class="category-content">
    <div class="container">
      <div class="category-filters">
        <div class="filter-group">
          <label for="sort-by">Ordenar por:</label>
          <select id="sort-by" class="filter-select">
            <option value="date-desc">Más recientes primero</option>
            <option value="date-asc">Más antiguos primero</option>
            <option value="title-asc">Título (A-Z)</option>
            <option value="title-desc">Título (Z-A)</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label for="time-period">Período:</label>
          <select id="time-period" class="filter-select">
            <option value="all">Todos</option>
            <option value="month">Último mes</option>
            <option value="quarter">Últimos 3 meses</option>
            <option value="year">Último año</option>
          </select>
        </div>
        
        <div class="search-filter">
          <input type="text" id="category-search" placeholder="Buscar en esta categoría..." />
          <button type="button" id="search-btn" aria-label="Buscar">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="11" cy="11" r="8"></circle>
              <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
          </button>
        </div>
      </div>
      
      {newsItems.length > 0 ? (
        <div class="news-grid" id="news-grid">
          {newsItems.map(news => {
            // Estandarización de campos
            const title = news.title || 'Sin título';
            
            // Recortar la descripción a un máximo de 150 caracteres
            let description = news.description || news.excerpt || '';
            if (description.length > 150) {
              description = description.substring(0, 147) + '...';
            }
            
            // Manejar diferentes formatos de fecha
            const pubDate = news.pubDate || news.pub_date || news.date || new Date();
            
            // Manejar diferentes formatos de categoría
            const category = news.category || news.categorySlug || categorySlug;
            
            // Manejar diferentes formatos de imagen
            const image = news.featured_image || news.image || news.hero_image || news.thumbnailUrl || '/img/placeholder-image.png';
            
            return (
              <div class="news-item" 
                data-title={title.toLowerCase()}
                data-date={new Date(pubDate).toISOString()}
              >
                <NewsCard 
                  title={title}
                  description={description}
                  pubDate={pubDate}
                  category={category}
                  image={image}
                  slug={news.slug}
                />
              </div>
            );
          })}
        </div>
      ) : (
        <div class="no-articles">
          <p>{noArticlesMessage}</p>
          
          <!-- Información de depuración -->
          <div class="debug-info">
            <h3>Información de depuración (solo visible en desarrollo)</h3>
            <p><strong>Categoría solicitada (slug):</strong> {categorySlug}</p>
            <p><strong>Categoría encontrada:</strong> {category ? 'Sí' : 'No'}</p>
            <p><strong>Nombre de categoría:</strong> {category?.name}</p>
            <p><strong>Slug de categoría:</strong> {category?.slug}</p>
            <p><strong>ID de categoría (legacy):</strong> {category?.id || 'N/A'}</p>
            <p><strong>Total de categorías disponibles:</strong> {categories.length}</p>
            
            <h4>Todas las categorías disponibles:</h4>
            <ul>
              {categories.map(cat => (
                <li>
                  <strong>{cat.name}</strong> (Slug: {cat.slug || 'N/A'})
                  {(cat.slug === categorySlug || cat.id === categorySlug) && <span class="highlight"> ← COINCIDENCIA</span>}
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}
      
      <div class="pagination">
        <button class="pagination-btn" disabled>Anterior</button>
        <span class="pagination-info">Página 1 de 1</span>
        <button class="pagination-btn" disabled>Siguiente</button>
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  /* Estilos para imágenes de respaldo */
  :global(.fallback-image) {
    object-fit: contain !important;
    padding: 1rem;
    background-color: #f8f8f8;
  }
  
  .container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }
  
  .category-header {
    background-color: var(--color-primary);
    color: white;
    padding: 3rem 0;
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .category-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }
  
  .category-header p {
    font-size: 1.2rem;
    max-width: 800px;
    margin: 0 auto;
    opacity: 0.9;
  }
  
  .category-content {
    padding-bottom: 4rem;
  }
  
  .category-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 2rem;
    align-items: center;
    justify-content: space-between;
    background-color: var(--color-bg-alt);
    padding: 1rem;
    border-radius: 8px;
  }
  
  .filter-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .filter-select {
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid var(--color-border);
    background-color: white;
    font-size: 0.9rem;
  }
  
  .search-filter {
    display: flex;
    flex: 1;
    max-width: 300px;
    position: relative;
  }
  
  .search-filter input {
    width: 100%;
    padding: 0.5rem 2.5rem 0.5rem 0.75rem;
    border-radius: 4px;
    border: 1px solid var(--color-border);
    font-size: 0.9rem;
  }
  
  .search-filter button {
    position: absolute;
    right: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: var(--color-text-muted);
    cursor: pointer;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .search-filter button:hover {
    color: var(--color-primary);
  }
  
  .news-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .news-item {
    display: flex;
    height: 100%;
  }
  
  /* Estilos para tarjetas consistentes */
  .news-item :global(.news-card) {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  /* Asegurar que todas las imágenes tienen la misma proporción */
  .news-item :global(.image-container) {
    aspect-ratio: 16 / 9;
  }
  
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-top: 2rem;
  }
  
  .pagination-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    background-color: white;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
  }
  
  .pagination-btn:not([disabled]):hover {
    background-color: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
  }
  
  .pagination-btn[disabled] {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .pagination-info {
    font-size: 0.9rem;
    color: var(--color-text-muted);
  }
  
  .no-results {
    text-align: center;
    padding: 3rem 0;
    color: var(--color-text-muted);
  }
  
  .no-results p {
    font-size: 1.1rem;
    margin-bottom: 1rem;
  }
  
  /* No Content Message */
  .no-content-message {
    background-color: var(--color-bg-alt);
    padding: 2rem;
    text-align: center;
    border-radius: 8px;
    margin: 1rem 0;
  }

  .no-content-message p {
    font-size: 1.1rem;
    color: var(--color-text-muted);
  }
  
  @media (max-width: 992px) {
    .news-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .category-filters {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .search-filter {
      max-width: 100%;
      width: 100%;
    }
  }
  
  @media (max-width: 768px) {
    .category-header {
      padding: 2rem 0;
    }
    
    .category-header h1 {
      font-size: 2rem;
    }
    
    .category-header p {
      font-size: 1rem;
    }
  }
  
  @media (max-width: 576px) {
    .news-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Funcionalidad de filtrado y ordenación
  document.addEventListener('DOMContentLoaded', () => {
    const sortBySelect = document.getElementById('sort-by') as HTMLSelectElement;
    const timePeriodSelect = document.getElementById('time-period') as HTMLSelectElement;
    const searchInput = document.getElementById('category-search') as HTMLInputElement;
    const searchBtn = document.getElementById('search-btn');
    const newsGrid = document.getElementById('news-grid');
    const newsItems = document.querySelectorAll('.news-item');
    
    if (!sortBySelect || !timePeriodSelect || !searchInput || !searchBtn || !newsGrid) return;
    
    // Función para filtrar y ordenar los elementos
    const filterAndSortItems = () => {
      const sortBy = sortBySelect.value;
      const timePeriod = timePeriodSelect.value;
      const searchTerm = searchInput.value.toLowerCase().trim();
      
      // Crear un array de los elementos para ordenar
      const itemsArray = Array.from(newsItems);
      
      // Filtrar por período de tiempo
      let filteredItems = itemsArray.filter(item => {
        const dateStr = (item as HTMLElement).dataset.date;
        if (!dateStr) return true;
        
        const itemDate = new Date(dateStr);
        const now = new Date();
        
        switch (timePeriod) {
          case 'month':
            const oneMonthAgo = new Date(now.setMonth(now.getMonth() - 1));
            return itemDate >= oneMonthAgo;
          case 'quarter':
            const threeMonthsAgo = new Date(now.setMonth(now.getMonth() - 3));
            return itemDate >= threeMonthsAgo;
          case 'year':
            const oneYearAgo = new Date(now.setFullYear(now.getFullYear() - 1));
            return itemDate >= oneYearAgo;
          default:
            return true;
        }
      });
      
      // Filtrar por término de búsqueda
      if (searchTerm) {
        filteredItems = filteredItems.filter(item => {
          const title = (item as HTMLElement).dataset.title || '';
          return title.includes(searchTerm);
        });
      }
      
      // Ordenar los elementos
      filteredItems.sort((a, b) => {
        const dateA = new Date((a as HTMLElement).dataset.date || '');
        const dateB = new Date((b as HTMLElement).dataset.date || '');
        const titleA = ((a as HTMLElement).dataset.title || '').toLowerCase();
        const titleB = ((b as HTMLElement).dataset.title || '').toLowerCase();
        
        switch (sortBy) {
          case 'date-desc':
            return dateB.getTime() - dateA.getTime();
          case 'date-asc':
            return dateA.getTime() - dateB.getTime();
          case 'title-asc':
            return titleA.localeCompare(titleB);
          case 'title-desc':
            return titleB.localeCompare(titleA);
          default:
            return 0;
        }
      });
      
      // Ocultar todos los elementos
      itemsArray.forEach(item => {
        (item as HTMLElement).style.display = 'none';
      });
      
      // Mostrar los elementos filtrados y ordenados
      if (filteredItems.length > 0) {
        filteredItems.forEach(item => {
          (item as HTMLElement).style.display = 'block';
        });
        
        // Reorganizar los elementos en el grid
        filteredItems.forEach(item => {
          newsGrid.appendChild(item);
        });
        
        // Mostrar mensaje si no hay resultados
        const noResultsEl = document.querySelector('.no-results');
        if (noResultsEl) {
          noResultsEl.remove();
        }
      } else {
        // Mostrar mensaje si no hay resultados
        if (!document.querySelector('.no-results')) {
          const noResults = document.createElement('div');
          noResults.className = 'no-results';
          noResults.innerHTML = '<p>No se encontraron artículos con los criterios seleccionados.</p>';
          newsGrid.parentNode?.insertBefore(noResults, newsGrid.nextSibling);
        }
      }
    };
    
    // Eventos para filtrar y ordenar
    sortBySelect.addEventListener('change', filterAndSortItems);
    timePeriodSelect.addEventListener('change', filterAndSortItems);
    searchBtn.addEventListener('click', filterAndSortItems);
    searchInput.addEventListener('keyup', (e) => {
      if (e.key === 'Enter') {
        filterAndSortItems();
      }
    });
    
    // Inicializar
    filterAndSortItems();
  });
</script>
