---
import { formatDate } from '../utils/formatDate';
import CategoryTag from './CategoryTag.astro';

interface Props {
  title: string;
  description: string;
  pubDate?: Date | string;
  date?: Date | string;
  category: string;
  image: string;
  slug?: string;
  url?: string;
  featured?: boolean;
  isNew?: boolean;
}

const { 
  title = 'Artículo', 
  description = 'Descripción no disponible para este artículo.', 
  pubDate, 
  date, 
  category = 'general',
  image = '/img/placeholder-image.png',
  slug, 
  url, 
  featured = false,
  isNew = false
} = Astro.props;

// Usar date si pubDate no está disponible
const dateToUse = pubDate || date;

// Normalizar la ruta de imagen (consolidar diferentes formatos posibles)
let normalizedImage = image || '';

// Verificar si la imagen es válida
console.log(`NewsCard - Imagen recibida: ${normalizedImage}`);

// Si no hay imagen o si es una URL que sabemos que da error 404 (media/uploads/...)
if (!normalizedImage || normalizedImage === '' || normalizedImage.startsWith('media/uploads/')) {
  // Usar imagen de respaldo
  normalizedImage = '/img/placeholder-image.png';
  console.log('NewsCard - Usando imagen de respaldo por ruta inválida');
}

// Limpiar URLs codificadas (+ o %25 se convierten en caracteres incorrectos en las rutas)
if (normalizedImage.includes('+') || normalizedImage.includes('%25')) {
  // Usar imagen de respaldo para URLs codificadas problemáticas
  normalizedImage = '/img/placeholder-image.png';
  console.log('NewsCard - Usando imagen de respaldo por caracteres especiales');
}

// Función para manejar la fecha de forma segura
const formatDateSafely = (date: Date | string | undefined) => {
  if (!date) return '';
  
  try {
    if (typeof date === 'string') {
      // Intentar convertir la cadena a objeto Date
      const dateObj = new Date(date);
      return dateObj.toISOString();
    } else if (date instanceof Date) {
      return date.toISOString();
    }
    return '';
  } catch (error) {
    console.error('Error al formatear la fecha:', error);
    return '';
  }
};

// Determinar la URL correcta para el enlace
const href = url || (slug ? `/news/${slug}/` : '#');

const isoDate = formatDateSafely(dateToUse);
const displayDate = dateToUse ? formatDate(dateToUse) : '';
---

<article 
  class={`
    bg-white rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 h-full flex flex-col
    ${featured ? 'featured' : ''} 
    ${isNew ? 'is-new' : ''}
  `}
  data-title={title}
  data-description={description}
  data-date={isoDate}
  data-category={category}
>
  <a href={href} class="flex flex-col h-full text-inherit no-underline hover:no-underline">
    <div class={`
      relative w-full overflow-hidden flex-shrink-0
      ${featured ? 'h-64 sm:h-52 md:h-56 lg:h-64' : 'h-48'}
    `}>
      <img 
        src={normalizedImage} 
        alt={title} 
        loading="lazy" 
        class={`
          w-full h-full object-cover transition-transform duration-300 hover:scale-105
          ${normalizedImage === '/img/placeholder-image.png' ? 'object-contain p-4 bg-gray-50' : ''}
        `}
        onerror="this.onerror=null; this.src='/img/placeholder-image.png'; this.classList.add('object-contain', 'p-4', 'bg-gray-50');" 
      />
      <div class="absolute top-3 left-3">
        <CategoryTag category={category} />
      </div>
      {isNew && (
        <span class="absolute top-3 right-3 bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium">
          Nuevo
        </span>
      )}
    </div>
    <div class={`
      flex-1 flex flex-col justify-between
      ${featured ? 'p-6' : 'p-4'}
    `}>
      <div class="flex-1">
        {isoDate && (
          <time 
            datetime={isoDate} 
            class="text-sm text-gray-500 mb-2 block"
          >
            {displayDate}
          </time>
        )}
        <h3 class={`
          font-bold text-gray-900 mb-3
          ${featured ? 'text-xl md:text-2xl line-clamp-3 md:line-clamp-none' : 'text-lg line-clamp-2'}
        `}>
          {title || 'Título del artículo'}
        </h3>
        <p class={`
          text-gray-600 mb-4
          ${featured ? 'text-base line-clamp-4 md:line-clamp-none' : 'text-sm line-clamp-3'}
        `}>
          {description || 'Descripción del artículo no disponible.'}
        </p>
      </div>
      <div class="mt-auto">
        <div class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium text-sm transition-colors duration-200">
          <span>Leer más</span>
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-2 transition-transform duration-200 group-hover:translate-x-1">
            <line x1="5" y1="12" x2="19" y2="12"></line>
            <polyline points="12 5 19 12 12 19"></polyline>
          </svg>
        </div>
      </div>
    </div>
  </a>
</article>

<!-- Migración completa a Tailwind CSS completada -->
